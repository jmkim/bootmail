#!/bin/bash
# bash is best way to run this script.

# bootmail: Email alert when system boot, reboot, and halt for Debian GNU/Linux.

### BEGIN INIT INFO
# Provides:          bootmail
# Required-Start:    $all
# Required-Stop:     $all
# Default-Start:     2
# Default-Stop:      0 1 6
### END INIT INFO

PATH="/sbin:/bin:/usr/sbin:/usr/bin"

LOADDEFAULT="yes"
DEFAULTFILE="/etc/default/bootmail"

# You can export these to '/etc/default/bootmail'.
MAILTO="root"
SENDER="$(id -n -u)@$(hostname -f)"
LOGDIR="/var/log"
LOGFILE="$LOGDIR/bootmail.log"
# 'apt-get install bootlogd'
USEBOOTLOG="no"
BOOTLOGFILE="/var/log/boot"

if [ "$LOADDEFAULT" == "yes" ] && test -f "$DEFAULTFILE"; then
	. "$DEFAULTFILE"
fi

if [ ! -z "$2" ]; then
	MAILTO="$2"
elif [ -z "$MAILTO" ]; then
	MAILTO="root"
fi

TIME="$(date +'%F %T')"

RUNLEVEL="$(runlevel)"
RUNLEVEL="${RUNLEVEL:1}"

do_mailx(){
	echo -n "bootmail: $OPTYPE mail sending to $MAILTO..."
	sudo mailx -s "$SUBJECT" "$MAILTO"
	return
}

do_mutt(){
	echo -n "bootmail: $OPTYPE mail sending to $MAILTO..."
	sudo mutt -s "$SUBJECT" -- "$MAILTO"
	return
}

do_mutt_a(){
	echo -n "bootmail: $OPTYPE mail sending to $MAILTO..."
	sudo mutt -s "$SUBJECT" -a "$BOOTLOGFILE" -- "$MAILTO"
	return
}

do_log(){
	if [ $1 -eq 0 ]; then
		printf "[ OK ] $TIME $RUNLEVEL $OPTYPE	to $MAILTO\n" >> $LOGFILE
		echo "OK"
		return 0
	else
		printf "[FAIL] $TIME $RUNLEVEL $OPTYPE	to $MAILTO\n" >> $LOGFILE
		echo "FAIL"
		return 1
	fi
}

body_boot(){
	local SUBJECT="Broadcast message from $SENDER"
	{	
		printf "Issued Date: $TIME\n"
		printf "bootmail:\n\n"
		printf "The system has been completely booted up.\n\n"
	} | do_mailx
	do_log $?
}

body_boot_a(){
	local SUBJECT="Broadcast message from $SENDER"
	{	
		printf "Issued Date: $TIME\n"
		printf "bootmail:\n\n"
		printf "The system has been completely booted up.\n\n"
		printf "Attachment: $BOOTLOGFILE (bootlogd)\n"
	} | do_mutt_a
	do_log $?
}

body_halt(){
	local SUBJECT="Broadcast message from $SENDER"
	{
		printf "Issued Date: $TIME\n"
		printf "bootmail:\n\n"
		printf "The system is going down for system halt NOW!\n\n"
	} | do_mailx
	do_log $?
}

body_reboot(){
	local SUBJECT="Broadcast message from $SENDER"
	{
		printf "Issued Date: $TIME\n"
		printf "bootmail:\n\n"
		printf "The system is going down for system reboot NOW!\n\n"
	} | do_mailx
	do_log $?
}

do_dryrun(){
	echo "Not yet."
}

do_bootlogd(){
	sed 's/\^\[/\o33/g;s/\[1G\[/\[27G\[/' "$BOOTLOGFILE"
	return
}

do_help(){
	echo "bootmail, Send email for alert system maintenance."
	echo "Usage: $0 {start|stop} [email address]"
	echo ""
	echo "Arguments:"
	echo "     start     system boot up alert."
	echo "     stop      system halt/reboot alert."
	echo ""
	echo "Options:"
	echo " -h, --help    print this help."
	echo " -n, --dry-run perform a trial run with no changes made."
	echo ""
	echo "This script is InitScript. Run directly is not recommended."
	echo ""
	echo "Current receive email address is: $MAILTO"
	echo "You can edit at '/etc/default/bootmail'."
	return 0
}

case "$1" in
	-h|-\?|--help)
		do_help
	;;
	-n|--dry-run)
		do_dryrun
	;;
	restart|reload|force-reload)
        	echo "Error: argument '$1' not supported" >&2
        	exit 3
        	;;
	start)
		OPTYPE="boot"
		if [ "$USEBOOTLOGD" == "yes" ] && test -f "$BOOTLOGFILE"; then
			body_boot_a
			
		else
			body_boot
		fi
	;;
	stop)
		if [ $RUNLEVEL -eq 6 ]; then
			OPTYPE="reboot"
			body_reboot
		else
			OPTYPE="halt"
			body_halt
		fi
	;;
	*)
		if [ ! -z "$1" ]; then
			echo "Invalid option: $1"
		fi
		echo "Usage: $0 {start|stop} [email address]" >&2
		echo "" >&2
		echo "Try '$0 --help' for more options." >&2
		exit 3
	;;
esac

exit
