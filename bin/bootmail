#!/bin/bash
# bash is the best way to run this script.

# bootmail: Email alert when system boot, reboot, and halt for Debian GNU/Linux.

### BEGIN INIT INFO
# Provides:          bootmail
# Required-Start:    $all
# Required-Stop:     $all
# Default-Start:     2
# Default-Stop:      0 1 6
### END INIT INFO

PATH="/sbin:/bin:/usr/sbin:/usr/bin"

# ENABLE_CONFIG="yes" when you wrote and use /etc/default/bootmail.
ENABLE_CONFIG="yes"
CONFIGFILE="/etc/default/bootmail"

# You can export these into /etc/default/bootmail (or $CONFIGFILE above).

# If argument was not given (or running as InitScript), $MAILTO will be set as the default receive email add
# ress.
MAILTO="root"

MAILFROM="$(id -n -u)@$(hostname -f)"

# You can send with "mutt" or "mail", "mailx". Recommended way is "mailx". But if you want ENABLE_BOOTLOG, y
# ou must use 'mutt'.
MAILCLIENT="mutt"

LOGDIR="/var/log"
LOGFILE="$LOGDIR/bootmail.log"

# ENABLE_BOOTLOG="no" when you use bootlogd. This option must with MAILCLIENT="mutt" !!
ENABLE_BOOTLOG="no"

# /var/log/boot is provided by bootlogd.
BOOTLOGFILE="/var/log/boot"

# Load /etc/default/bootmail when $ENABLE_CONFIG is "yes".
if [ "$ENABLE_CONFIG" == "yes" ] && test -f "$CONFIGFILE"; then
	. "$CONFIGFILE"
fi

if [ $# -ge 2 ]; then
	# Get last argument hack from stackoverflow.com/questions/1853946
	for MAILTO; do :; done
elif [ -z "$MAILTO" ]; then
	# If $MAILTO not set (even around line:22), default value is "root".
	MAILTO="root"
fi

TIME="$(date +'%F %T')"

RUNLEVEL="$(runlevel)"
RUNLEVEL="${RUNLEVEL:1}"

do_configcheck(){
	if [ ! "$MAILCLIENT" == "mutt" ] && [ ! "$MAILCLIENT" == "mailx" ] && [ ! "$MAILCLIENT" == "mail" ]; then 
		echo "\$MAILCLIENT must be set. Current value: $MAILCLIENT" >&2
		local RESULT=4
	fi
	if [ -z "$LOGDIR" ]; then
		echo "\$LOGDIR must be set. Current value: $LOGDIR" >&2
		local RESULT=5
	elif test ! -w "$LOGDIR"; then 
		echo "Permission denied in directory: $LOGDIR" >&2
		local RESULT=6
	fi
	if [ -z "$LOGFILE" ]; then
		echo "\$LOGFILE must be set. Current value: $LOGFILE" >&2
		local RESULT=7
	else
		touch "$LOGFILE"
		if test ! -w "$LOGFILE"; then
			echo "Permission denied in file: $LOGFILE" >&2
			local RESULT=8
		fi
	fi
	if [[ $RESULT -gt 0 ]] ; then
		exit $RESULT
	fi
	return 0
}

do_mail(){
	echo -n "bootmail: $OPTYPE mail sending to $MAILTO..."
	sudo mail -s "$SUBJECT" "$MAILTO"
	return
}

do_mailx(){
	echo -n "bootmail: $OPTYPE mail sending to $MAILTO..."
	sudo mailx -s "$SUBJECT" "$MAILTO"
	return
}

do_mutt(){
	echo -n "bootmail: $OPTYPE mail sending to $MAILTO..."
	sudo mutt -s "$SUBJECT" -- "$MAILTO"
	return
}

do_mutt_a(){
	echo -n "bootmail: $OPTYPE mail sending to $MAILTO..."
	sudo mutt -s "$SUBJECT" -a "$BOOTLOGFILE" -- "$MAILTO"
	return
}

do_log(){
	if [ $1 -eq 0 ]; then
		printf "[ OK ] $TIME $RUNLEVEL $OPTYPE	to $MAILTO\n" >> $LOGFILE
		echo "OK"
		return 0
	else
		printf "[FAIL] $TIME $RUNLEVEL $OPTYPE	to $MAILTO\n" >> $LOGFILE
		echo "FAIL"
		return 1
	fi
}

mail_boot(){
	local SUBJECT="Broadcast message from $MAILFROM"
	{	
		printf "Issued Date: $TIME\n"
		printf "bootmail:\n\n"
		printf "The system has been completely booted up.\n\n"
	} | do_$MAILCLIENT
	do_log $?
}

mail_boot_a(){
	local SUBJECT="Broadcast message from $MAILFROM"
	{	
		printf "Issued Date: $TIME\n"
		printf "bootmail:\n\n"
		printf "The system has been completely booted up.\n\n"
		printf "Attachment: $BOOTLOGFILE (bootlogd)\n"
	} | do_mutt_a
	do_log $?
}

mail_halt(){
	local SUBJECT="Broadcast message from $MAILFROM"
	{
		printf "Issued Date: $TIME\n"
		printf "bootmail:\n\n"
		printf "The system is going down for system halt NOW!\n\n"
	} | do_$MAILCLIENT
	do_log $?
}

mail_reboot(){
	local SUBJECT="Broadcast message from $MAILFROM"
	{
		printf "Issued Date: $TIME\n"
		printf "bootmail:\n\n"
		printf "The system is going down for system reboot NOW!\n\n"
	} | do_$MAILCLIENT
	do_log $?
}

do_dryrun(){
	echo "Not yet in current version." >&2
	return 1
}

do_bootlogd(){
	sed 's/\^\[/\o33/g;s/\[1G\[/\[27G\[/' "$BOOTLOGFILE"
	return
}

do_help(){
	echo "bootmail, Send email for alert system maintenance."
	echo "Usage: $0 [-h] {start|stop} [email address]"
	echo ""
	echo "Arguments:"
	echo "     start     system boot up alert."
	echo "     stop      system halt/reboot alert."
	if [ "$ENABLE_BOOTLOG" == "yes" ]; then echo "     bootlogd  print colorful boot record."; fi
	echo ""
	echo "Options:"
	echo " -h, --help    print this help."
	#echo " -n, --dry-run perform a trial run with no changes made."
	echo ""
	echo "This script is InitScript. Run directly is not recommended."
	echo ""
	echo "Current receive email address is: $MAILTO"
	echo "You can edit at '/etc/default/bootmail'."
	return 0
}

case "$1" in
	-h|-\?|--help)
		do_help
	;;
	-n|--dry-run)
		do_dryrun
	;;
	restart|reload|force-reload)
        	echo "Error: argument '$1' not supported" >&2
        	exit 3
        	;;
	start)
		do_configcheck
		OPTYPE="boot"
		if [ "$ENABLE_BOOTLOG" == "yes" ] && test -f "$BOOTLOGFILE" && [ "$MAILCLIENT" == "mutt" ]; then
			mail_boot_a
		else
			mail_boot
		fi
	;;
	stop)
		do_configcheck
		# $RUNLEVEL in default, 6 is reboot and 0 is halt.
		if [ $RUNLEVEL -eq 6 ]; then
			OPTYPE="reboot"
			mail_reboot
		elif [ $RUNLEVEL -eq 0 ]; then
			OPTYPE="halt"
			mail_halt
		else
			OPTYPE="halt"
			mail_halt
		fi
	;;
	bootlogd)
		if test -f "$BOOTLOGFILE"; then
			do_bootlogd
		fi
	;;
	*)
		if [ ! -z "$1" ]; then
			echo "Invalid option: $1" >&2
		fi
		echo "Usage: $0 {start|stop} [email address]" >&2
		echo "" >&2
		echo "Try '$0 --help' for more options." >&2
		exit 3
	;;
esac

exit
